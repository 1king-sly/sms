generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("SUPER_ADMIN")
  schoolId  String?
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schools   School[]
}

model School {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  password     String
  logo         String?
  address      String
  contact      String
  initials     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  superAdminId String
  superAdmin   SuperAdmin   @relation(fields: [superAdminId], references: [id])
  departments  Department[]
  schoolAdmin  SchoolAdmin?
  teachers     Teacher[]
  students     Student[]
  classes      Class[]

  subjects Subject[]

  DepartmentAdmin DepartmentAdmin[]
  exams            Exam[]
  academicYears AcademicYear[]
}

model SchoolAdmin {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  role     String @default("SCHOOL_ADMIN")

  schoolId  String   @unique
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id        String            @id @default(cuid())
  name      String
  schoolId  String
  school    School            @relation(fields: [schoolId], references: [id])
  admins    DepartmentAdmin[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  TeacherDepartment TeacherDepartment[]
}

model DepartmentAdmin {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  password     String
  departmentId String
  role         String @default("DEPARTMENT_ADMIN")
  schoolId     String
  school       School @relation(fields: [schoolId], references: [id])

  department Department @relation(fields: [departmentId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Teacher {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  password String
  idNumber String  @unique
  photo    String?
  schoolId String
  role     String  @default("TEACHER")

  school       School              @relation(fields: [schoolId], references: [id])
  departments  TeacherDepartment[]
  subjects     TeacherSubject[]
  classTeacher Stream?             @relation("ClassTeacher")
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  ExamResult ExamResult[]
}

model TeacherDepartment {
  id           String     @id @default(cuid())
  teacherId    String
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([teacherId, departmentId])
}

model Subject {
  id        String           @id @default(cuid())
  name      String
  initials  String
  category  String
  schoolId  String
  school    School           @relation(fields: [schoolId], references: [id])
  teachers  TeacherSubject[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  examResults ExamResult[]
  isCore      Boolean   @default(false)
}

model TeacherSubject {
  id        String   @id @default(cuid())
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, subjectId])
}



model Stream {
  id           String    @id @default(cuid())
  name         String
  classId      String
  class        Class     @relation(fields: [classId], references: [id])
  teacherId    String?   @unique
  classTeacher Teacher?  @relation("ClassTeacher", fields: [teacherId], references: [id])
  students     Student[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Student {
  id          String   @id @default(cuid())
  name        String
  admissionNo String   @unique
  email       String   @unique
  password    String
  schoolId    String
  role        String   @default("STUDENT")
  school      School   @relation(fields: [schoolId], references: [id])
  streamId    String
  stream      Stream   @relation(fields: [streamId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ExamResult ExamResult[]
}

model AcademicYear {
  id        String   @id @default(cuid())
  year      Int      @unique
  startDate DateTime
  endDate   DateTime
  classes   Class[]
  exams     Exam[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  School School[]
}

model Class {
  id             String        @id @default(cuid())
  name           String // e.g., "Form 1", "Form 2"
  academicYear   Int // e.g., 2024
  schoolId       String
  school         School        @relation(fields: [schoolId], references: [id])
  streams        Stream[]
  isGraduated    Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?

  @@unique([name, academicYear, schoolId])
}

model Exam {
  id             String        @id @default(cuid())
  name           String // e.g., "Term 1 Exam 2024"
  type           ExamType
  term           Int // 1, 2, or 3
  academicYear   Int
  schoolId       String
  school         School        @relation(fields: [schoolId], references: [id])
  startDate      DateTime
  endDate        DateTime
  isPublished    Boolean       @default(false)
  isConsolidated Boolean       @default(false)
  examResults    ExamResult[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?
}

enum ExamType {
  OPENER
  MID_TERM
  END_TERM
  MOCK
  CONSOLIDATED
}

model ExamResult {
  id        String   @id @default(cuid())
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  marks     Float
  grade     String
  remarks   String?
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([examId, studentId, subjectId])
}
